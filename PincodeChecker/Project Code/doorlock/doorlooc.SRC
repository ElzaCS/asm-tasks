; doorlooc.SRC generated from: doorlooc.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE doorlooc.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Listings\doorlooc.lst) TABS(2) OBJECT(.\Objects\doorlooc.obj)

$NOMOD51

NAME	DOORLOOC

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
EA	BIT	0A8H.7
IE	DATA	0A8H
keycolumn1	BIT	0B0H.0
keycolumn2	BIT	0B0H.1
keycolumn3	BIT	0B0H.2
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
WR	BIT	0B0H.6
motorpin1	BIT	0B0H.3
motorpin2	BIT	0B0H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
TF1	BIT	088H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
en	BIT	0B0H.7
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
keyrow1	BIT	0A0H.0
TR0	BIT	088H.4
RS1	BIT	0D0H.4
keyrow2	BIT	0A0H.1
TR1	BIT	088H.6
keyrow3	BIT	0A0H.2
PX0	BIT	0B8H.0
keyrow4	BIT	0A0H.3
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
rs	BIT	0B0H.5
REN	BIT	098H.4
rw	BIT	0B0H.6
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?main?DOORLOOC    SEGMENT CODE 
?DT?main?DOORLOOC    SEGMENT DATA OVERLAYABLE 
?PR?_delay?DOORLOOC  SEGMENT CODE 
?PR?_lcdcmd?DOORLOOC SEGMENT CODE 
?PR?_lcddat?DOORLOOC SEGMENT CODE 
?PR?_lcddisplay?DOORLOOC                 SEGMENT CODE 
?DT?_lcddisplay?DOORLOOC                 SEGMENT DATA OVERLAYABLE 
?PR?keypad?DOORLOOC  SEGMENT CODE 
?PR?check?DOORLOOC   SEGMENT CODE 
?CO?DOORLOOC         SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?DT?DOORLOOC         SEGMENT DATA 
	EXTRN	CODE (?C_STARTUP)
	EXTRN	CODE (?C?CLDOPTR)
	PUBLIC	pin
	PUBLIC	Epin
	PUBLIC	check
	PUBLIC	keypad
	PUBLIC	_lcddisplay
	PUBLIC	_lcddat
	PUBLIC	_lcdcmd
	PUBLIC	_delay
	PUBLIC	main

	RSEG  ?DT?main?DOORLOOC
?main?BYTE:
          i?040:   DS   2

	RSEG  ?DT?_lcddisplay?DOORLOOC
?_lcddisplay?BYTE:
          q?446:   DS   3
	ORG  3
          k?447:   DS   2

	RSEG  ?DT?DOORLOOC
           Epin:   DS   5
            pin:   DS   6

	RSEG  ?CO?DOORLOOC
?SC_0:
	DB  'E' ,'N' ,'T' ,'E' ,'R' ,' ' ,'P' ,'I' ,'N' ,' ' 
	DB  'N' ,'U' ,'M' ,'B' ,'E' ,'R' ,000H

?SC_17:
	DB  'P' ,'I' ,'N' ,' ' ,'C' ,'O' ,'R' ,'R' ,'E' ,'C' 
	DB  'T' ,000H

?SC_29:
	DB  'D' ,'O' ,'O' ,'R' ,' ' ,'O' ,'P' ,'E' ,'N' ,'E' 
	DB  'D' ,000H

?SC_41:
	DB  'W' ,'R' ,'O' ,'N' ,'G' ,' ' ,'P' ,'I' ,'N' ,000H


	RSEG  ?C_INITSEG
	DB	006H
	DB	pin
	DB  '1' ,'2' ,'3' ,'4' ,'5' ,000H


; // password based door lock system in 8051 microprocessor
; #pragma src
; #include <reg51.h>
; 
; // connected pins
; // keypad rows
; sbit keyrow1 = P2 ^ 0;
; sbit keyrow2 = P2 ^ 1;
; sbit keyrow3 = P2 ^ 2;
; sbit keyrow4 = P2 ^ 3;
; //keypad column
; sbit keycolumn1 = P3 ^ 0;
; sbit keycolumn2 = P3 ^ 1;
; sbit keycolumn3 = P3 ^ 2;
; 
; // motor pins
; sbit motorpin1 = P3 ^ 3;
; sbit motorpin2 = P3 ^ 4;
; 
; // led pins
; sbit rs = P3 ^ 5;
; sbit rw = P3 ^ 6;
; sbit en = P3 ^ 7;
; 
; //functions
; void lcdcmd(unsigned char);
; void lcddat(unsigned char);
; void lcddisplay(unsigned char *q);
; char keypad();
; void check();
; void delay(unsigned int);
; unsigned char pin[] = {"12345"};
; unsigned char Epin[5];
; 
; // main function
; void main()

	RSEG  ?PR?main?DOORLOOC
main:
	USING	0
			; SOURCE LINE # 36
; {
			; SOURCE LINE # 37
;     lcdcmd(0x0F); //decimal value: 15
			; SOURCE LINE # 38
	MOV  	R7,#0FH
	LCALL	_lcdcmd
;     lcdcmd(0x38); //decimal value: 56
			; SOURCE LINE # 39
	MOV  	R7,#038H
	LCALL	_lcdcmd
;     lcdcmd(0x01); //decimal value: 1
			; SOURCE LINE # 40
	MOV  	R7,#01H
	LCALL	_lcdcmd
?C0001:
; 
;     while (1)
			; SOURCE LINE # 42
;     {
			; SOURCE LINE # 43
;         unsigned int i = 0;
			; SOURCE LINE # 44
	CLR  	A
	MOV  	i?040,A
	MOV  	i?040+01H,A
;         lcdcmd(0x80); //decimal value: 128
			; SOURCE LINE # 45
	MOV  	R7,#080H
	LCALL	_lcdcmd
;         lcddisplay("ENTER PIN NUMBER");
			; SOURCE LINE # 46
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	LCALL	_lcddisplay
;         delay(1000);
			; SOURCE LINE # 47
	LCALL	L?0044
;         lcdcmd(0xc0); //decimal value: 192
			; SOURCE LINE # 48
	MOV  	R7,#0C0H
	LCALL	_lcdcmd
?C0003:
;         while (pin[i] != '\0')
			; SOURCE LINE # 49
	MOV  	A,#LOW (pin)
	ADD  	A,i?040+01H
	MOV  	R0,A
	MOV  	A,@R0
	JZ   	?C0004
;         {
			; SOURCE LINE # 50
;             Epin[i] = keypad();
			; SOURCE LINE # 51
	LCALL	keypad
	MOV  	A,#LOW (Epin)
	ADD  	A,i?040+01H
	MOV  	R0,A
	MOV  	@R0,AR7
;             delay(1000);
			; SOURCE LINE # 52
	LCALL	L?0044
;             i++;
			; SOURCE LINE # 53
	INC  	i?040+01H
	MOV  	A,i?040+01H
	JNZ  	?C0003
	INC  	i?040
?C0037:
;         }
			; SOURCE LINE # 54
	SJMP 	?C0003
?C0004:
;         check();
			; SOURCE LINE # 55
	LCALL	check
;     }
			; SOURCE LINE # 56
	SJMP 	?C0001
; END OF main

; }
; 
; //delay function
; void delay(unsigned int j)

	RSEG  ?PR?_delay?DOORLOOC
L?0042:
	USING	0
L?0043:
	MOV  	R7,#02AH
	LCALL	_lcddat
L?0044:
	MOV  	R7,#0E8H
	MOV  	R6,#03H
_delay:
	USING	0
			; SOURCE LINE # 60
;---- Variable 'j?141' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 61
;     int a, b;
;     for (a = 0; a < j; a++)
			; SOURCE LINE # 63
;---- Variable 'a?142' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
?C0006:
	CLR  	C
	MOV  	A,R5
	SUBB 	A,R7
	MOV  	A,R4
	SUBB 	A,R6
	JNC  	?C0012
;     {
			; SOURCE LINE # 64
;         for (b = 0; b < 10; b++)
			; SOURCE LINE # 65
;---- Variable 'b?143' assigned to Register 'R2/R3' ----
	CLR  	A
	MOV  	R3,A
	MOV  	R2,A
?C0009:
	INC  	R3
	CJNE 	R3,#00H,?C0038
	INC  	R2
?C0038:
	MOV  	A,R3
	XRL  	A,#0AH
	ORL  	A,R2
	JNZ  	?C0009
;             ;
;     }
			; SOURCE LINE # 67
?C0008:
	INC  	R5
	CJNE 	R5,#00H,?C0039
	INC  	R4
?C0039:
	SJMP 	?C0006
; }
			; SOURCE LINE # 68
?C0012:
	RET  	
; END OF _delay

; 
; // lcd commands functions
; void lcdcmd(unsigned char A)

	RSEG  ?PR?_lcdcmd?DOORLOOC
_lcdcmd:
	USING	0
			; SOURCE LINE # 71
;---- Variable 'A?244' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 72
;     P1 = A;
			; SOURCE LINE # 73
	MOV  	P1,R7
;     rs = 0;
			; SOURCE LINE # 74
	CLR  	rs
;     rw = 0;
			; SOURCE LINE # 75
	CLR  	rw
;     en = 1;
			; SOURCE LINE # 76
	SETB 	en
;     delay(1000);
			; SOURCE LINE # 77
	LCALL	L?0044
;     en = 0;
			; SOURCE LINE # 78
	CLR  	en
; }
			; SOURCE LINE # 79
	RET  	
; END OF _lcdcmd

; 
; //lcd data function
; 
; void lcddat(unsigned char i)

	RSEG  ?PR?_lcddat?DOORLOOC
_lcddat:
	USING	0
			; SOURCE LINE # 83
;---- Variable 'i?345' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 84
;     P1 = i;
			; SOURCE LINE # 85
	MOV  	P1,R7
;     rs = 1;
			; SOURCE LINE # 86
	SETB 	rs
;     rw = 0;
			; SOURCE LINE # 87
	CLR  	rw
;     en = 1;
			; SOURCE LINE # 88
	SETB 	en
;     delay(1000);
			; SOURCE LINE # 89
	LCALL	L?0044
;     en = 0;
			; SOURCE LINE # 90
	CLR  	en
; }
			; SOURCE LINE # 91
	RET  	
; END OF _lcddat

; 
; //lcd display charecters function
; 
; void lcddisplay(unsigned char *q)

	RSEG  ?PR?_lcddisplay?DOORLOOC
_lcddisplay:
	USING	0
			; SOURCE LINE # 95
	MOV  	q?446,R3
	MOV  	q?446+01H,R2
	MOV  	q?446+02H,R1
; {
			; SOURCE LINE # 96
;     int k;
;     for (k = 0; q[k] != '\0'; k++)
			; SOURCE LINE # 98
	CLR  	A
	MOV  	k?447,A
	MOV  	k?447+01H,A
?C0015:
	MOV  	R3,q?446
	MOV  	R2,q?446+01H
	MOV  	R1,q?446+02H
	MOV  	DPL,k?447+01H
	MOV  	DPH,k?447
	LCALL	?C?CLDOPTR
	MOV  	R7,A
	JZ   	?C0016
;     {
			; SOURCE LINE # 99
;         lcddat(q[k]);
			; SOURCE LINE # 100
	LCALL	_lcddat
;     }
			; SOURCE LINE # 101
	INC  	k?447+01H
	MOV  	A,k?447+01H
	JNZ  	?C0015
	INC  	k?447
?C0040:
	SJMP 	?C0015
?C0016:
;     delay(10000);
			; SOURCE LINE # 102
	MOV  	R7,#010H
	MOV  	R6,#027H
	LJMP 	_delay
; END OF _lcddisplay

; }
; 
; // assign keypad character value function
; 
; char keypad()

	RSEG  ?PR?keypad?DOORLOOC
keypad:
	USING	0
			; SOURCE LINE # 107
; {
			; SOURCE LINE # 108
;     int x = 0;
			; SOURCE LINE # 109
;---- Variable 'x?548' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
?C0019:
;     while (x == 0)
			; SOURCE LINE # 110
	MOV  	A,R7
	ORL  	A,R6
	JZ   	$ + 5H
	LJMP 	?C0020
;     {
			; SOURCE LINE # 111
;         // assign values for first row
;         keyrow1 = 0;
			; SOURCE LINE # 113
	CLR  	keyrow1
;         keyrow2 = 1;
			; SOURCE LINE # 114
	SETB 	keyrow2
;         keyrow3 = 1;
			; SOURCE LINE # 115
	SETB 	keyrow3
;         keyrow4 = 1;
			; SOURCE LINE # 116
	SETB 	keyrow4
;         if (keycolumn1 == 0)
			; SOURCE LINE # 117
	JB   	keycolumn1,?C0021
;         {
			; SOURCE LINE # 118
;             lcddat('*');
			; SOURCE LINE # 119
;             delay(1000);
			; SOURCE LINE # 120
	LCALL	L?0042
;             x = 1;
			; SOURCE LINE # 121
;             return '1';
			; SOURCE LINE # 122
	MOV  	R7,#031H
	RET  	
;         }
			; SOURCE LINE # 123
?C0021:
;         if (keycolumn2 == 0)
			; SOURCE LINE # 124
	JB   	keycolumn2,?C0023
;         {
			; SOURCE LINE # 125
;             lcddat('*');
			; SOURCE LINE # 126
;             delay(1000);
			; SOURCE LINE # 127
	LCALL	L?0042
;             x = 1;
			; SOURCE LINE # 128
;             return '2';
			; SOURCE LINE # 129
	MOV  	R7,#032H
	RET  	
;         }
			; SOURCE LINE # 130
?C0023:
;         if (keycolumn3 == 0)
			; SOURCE LINE # 131
	JB   	keycolumn3,?C0024
;         {
			; SOURCE LINE # 132
;             lcddat('*');
			; SOURCE LINE # 133
;             delay(1000);
			; SOURCE LINE # 134
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 135
;             return '3';
			; SOURCE LINE # 136
	MOV  	R7,#033H
	RET  	
;         }
			; SOURCE LINE # 137
?C0024:
;         // assign values for second row
;         keyrow1 = 1;
			; SOURCE LINE # 139
	SETB 	keyrow1
;         keyrow2 = 0;
			; SOURCE LINE # 140
	CLR  	keyrow2
;         keyrow3 = 1;
			; SOURCE LINE # 141
	SETB 	keyrow3
;         keyrow4 = 1;
			; SOURCE LINE # 142
	SETB 	keyrow4
; 
;         if (keycolumn1 == 0)
			; SOURCE LINE # 144
	JB   	keycolumn1,?C0025
;         {
			; SOURCE LINE # 145
;             lcddat('*');
			; SOURCE LINE # 146
;             delay(1000);
			; SOURCE LINE # 147
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 148
;             return '4';
			; SOURCE LINE # 149
	MOV  	R7,#034H
	RET  	
;         }
			; SOURCE LINE # 150
?C0025:
;         if (keycolumn2 == 0)
			; SOURCE LINE # 151
	JB   	keycolumn2,?C0026
;         {
			; SOURCE LINE # 152
;             lcddat('*');
			; SOURCE LINE # 153
;             delay(1000);
			; SOURCE LINE # 154
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 155
;             return '5';
			; SOURCE LINE # 156
	MOV  	R7,#035H
	RET  	
;         }
			; SOURCE LINE # 157
?C0026:
;         if (keycolumn3 == 0)
			; SOURCE LINE # 158
	JB   	keycolumn3,?C0027
;         {
			; SOURCE LINE # 159
;             lcddat('*');
			; SOURCE LINE # 160
;             delay(1000);
			; SOURCE LINE # 161
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 162
;             return '6';
			; SOURCE LINE # 163
	MOV  	R7,#036H
	RET  	
;         }
			; SOURCE LINE # 164
?C0027:
; 
;         // assign values for third row
;         keyrow1 = 1;
			; SOURCE LINE # 167
	SETB 	keyrow1
;         keyrow2 = 1;
			; SOURCE LINE # 168
	SETB 	keyrow2
;         keyrow3 = 0;
			; SOURCE LINE # 169
	CLR  	keyrow3
;         keyrow4 = 1;
			; SOURCE LINE # 170
	SETB 	keyrow4
;         if (keycolumn1 == 0)
			; SOURCE LINE # 171
	JB   	keycolumn1,?C0028
;         {
			; SOURCE LINE # 172
;             lcddat('*');
			; SOURCE LINE # 173
;             delay(1000);
			; SOURCE LINE # 174
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 175
;             return '7';
			; SOURCE LINE # 176
	MOV  	R7,#037H
	RET  	
;         }
			; SOURCE LINE # 177
?C0028:
;         if (keycolumn2 == 0)
			; SOURCE LINE # 178
	JB   	keycolumn2,?C0029
;         {
			; SOURCE LINE # 179
;             lcddat('*');
			; SOURCE LINE # 180
;             delay(1000);
			; SOURCE LINE # 181
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 182
;             return '8';
			; SOURCE LINE # 183
	MOV  	R7,#038H
	RET  	
;         }
			; SOURCE LINE # 184
?C0029:
;         if (keycolumn3 == 0)
			; SOURCE LINE # 185
	JB   	keycolumn3,?C0030
;         {
			; SOURCE LINE # 186
;             lcddat('*');
			; SOURCE LINE # 187
;             delay(1000);
			; SOURCE LINE # 188
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 189
;             return '9';
			; SOURCE LINE # 190
	MOV  	R7,#039H
	RET  	
;         }
			; SOURCE LINE # 191
?C0030:
; 
;         // assign values for forth row
;         keyrow1 = 1;
			; SOURCE LINE # 194
	SETB 	keyrow1
;         keyrow2 = 1;
			; SOURCE LINE # 195
	SETB 	keyrow2
;         keyrow3 = 1;
			; SOURCE LINE # 196
	SETB 	keyrow3
;         keyrow4 = 0;
			; SOURCE LINE # 197
	CLR  	keyrow4
; 
;         if (keycolumn1 == 0)
			; SOURCE LINE # 199
	JB   	keycolumn1,?C0031
;         {
			; SOURCE LINE # 200
;             lcddat('*');
			; SOURCE LINE # 201
;             delay(1000);
			; SOURCE LINE # 202
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 203
;             return '*';
			; SOURCE LINE # 204
	MOV  	R7,#02AH
	RET  	
;         }
			; SOURCE LINE # 205
?C0031:
;         if (keycolumn2 == 0)
			; SOURCE LINE # 206
	JB   	keycolumn2,?C0032
;         {
			; SOURCE LINE # 207
;             lcddat('*');
			; SOURCE LINE # 208
;             delay(1000);
			; SOURCE LINE # 209
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 210
;             return '0';
			; SOURCE LINE # 211
	MOV  	R7,#030H
	RET  	
;         }
			; SOURCE LINE # 212
?C0032:
;         if (keycolumn3 == 0)
			; SOURCE LINE # 213
	JNB  	keycolumn3,$ + 6H
	LJMP 	?C0019
;         {
			; SOURCE LINE # 214
;             lcddat('*');
			; SOURCE LINE # 215
;             delay(1000);
			; SOURCE LINE # 216
	LCALL	L?0043
;             x = 1;
			; SOURCE LINE # 217
;             return '#';
			; SOURCE LINE # 218
	MOV  	R7,#023H
	RET  	
;         }
			; SOURCE LINE # 219
;     }
			; SOURCE LINE # 220
?C0020:
; 		return '#';
			; SOURCE LINE # 221
	MOV  	R7,#023H
; }
			; SOURCE LINE # 222
?C0022:
	RET  	
; END OF keypad

; 
; // password check function and run the door motor
; 
; void check()

	RSEG  ?PR?check?DOORLOOC
check:
	USING	0
			; SOURCE LINE # 226
; {
			; SOURCE LINE # 227
;     //  compare the input value with the assign password value
;     if (pin[0] == Epin[0] && pin[1] == Epin[1] && pin[2] == Epin[2] && pin[3] == Epin[3] && pin[4] == Epin[4])
			; SOURCE LINE # 229
	MOV  	A,pin
	XRL  	A,Epin
	JNZ  	?C0034
	MOV  	A,pin+01H
	XRL  	A,Epin+01H
	JNZ  	?C0034
	MOV  	A,pin+02H
	XRL  	A,Epin+02H
	JNZ  	?C0034
	MOV  	A,pin+03H
	XRL  	A,Epin+03H
	JNZ  	?C0034
	MOV  	A,pin+04H
	XRL  	A,Epin+04H
	JNZ  	?C0034
;     {
			; SOURCE LINE # 230
;         delay(1000);
			; SOURCE LINE # 231
	LCALL	L?0044
;         lcdcmd(0x01); //decimal value: 1
			; SOURCE LINE # 232
	MOV  	R7,#01H
	LCALL	_lcdcmd
;         lcdcmd(0x81); //decimal value: 129
			; SOURCE LINE # 233
	MOV  	R7,#081H
	LCALL	_lcdcmd
;         // show pin is correct
;         lcddisplay("PIN CORRECT");
			; SOURCE LINE # 235
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_17)
	MOV  	R1,#LOW (?SC_17)
	LCALL	_lcddisplay
;         delay(1000);
			; SOURCE LINE # 236
	LCALL	L?0044
;         // door motor will run
;         motorpin1 = 1;
			; SOURCE LINE # 238
	SETB 	motorpin1
;         motorpin2 = 0;
			; SOURCE LINE # 239
	CLR  	motorpin2
;         lcdcmd(0xc1); //decimal value: 193
			; SOURCE LINE # 240
	MOV  	R7,#0C1H
	LCALL	_lcdcmd
;         // show the door is unlocked
;         lcddisplay("DOOR OPENED");
			; SOURCE LINE # 242
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_29)
	MOV  	R1,#LOW (?SC_29)
	LCALL	_lcddisplay
;         delay(10000);
			; SOURCE LINE # 243
	MOV  	R7,#010H
	MOV  	R6,#027H
	LCALL	_delay
;         motorpin1 = 1;
			; SOURCE LINE # 244
	SETB 	motorpin1
;         motorpin2 = 0;
			; SOURCE LINE # 245
	CLR  	motorpin2
;         lcdcmd(0x01); //decimal value: 1
			; SOURCE LINE # 246
;     }
			; SOURCE LINE # 247
	SJMP 	?C0041
?C0034:
;     else
;     {
			; SOURCE LINE # 249
;         lcdcmd(0x01); //decimal value: 1
			; SOURCE LINE # 250
	MOV  	R7,#01H
	LCALL	_lcdcmd
;         lcdcmd(0x80); //decimal value: 128
			; SOURCE LINE # 251
	MOV  	R7,#080H
	LCALL	_lcdcmd
;         lcddisplay("WRONG PIN");
			; SOURCE LINE # 252
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_41)
	MOV  	R1,#LOW (?SC_41)
	LCALL	_lcddisplay
;         delay(1000);
			; SOURCE LINE # 253
	LCALL	L?0044
;         lcdcmd(0x01); //decimal value: 1
			; SOURCE LINE # 254
?C0041:
	MOV  	R7,#01H
	LCALL	_lcdcmd
;     }
			; SOURCE LINE # 255
; }
			; SOURCE LINE # 256
?C0036:
	RET  	
; END OF check

	END
